{"version":3,"file":"static/js/392.5c8d7eee.chunk.js","mappings":"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","sources":["components/Ui/ProfileDropdown.js","layouts/Topbar.js"],"sourcesContent":["// @flow\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Dropdown } from \"react-bootstrap\";\nimport classNames from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { SetLogout } from \"../../redux/slices/AuthSlice\";\nimport profileImg from \"../../assets/images/users/avatar-1.jpg\";\n\nconst ProfileDropdown = (props) => {\n  const profilePic = profileImg;\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  /*\n   * toggle profile-dropdown\n   */\n  const toggleDropdown = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  return (\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        variant=\"link\"\n        id=\"dropdown-profile\"\n        as={Link}\n        to=\"#\"\n        onClick={toggleDropdown}\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\n      >\n        <span className=\"account-user-avatar\">\n          <img src={profilePic} className=\"rounded-circle\" alt=\"user\" />\n        </span>\n        <span>\n\n          <span className=\"account-position\">{props.userTitle}</span>\n        </span>\n      </Dropdown.Toggle>\n      <Dropdown.Menu\n        align={\"end\"}\n        className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\"\n      >\n        <div onClick={toggleDropdown}>\n          <div className=\"dropdown-header noti-title\">\n            <h6 className=\"text-overflow m-0\">Welcome !</h6>\n          </div>\n          {props.menuItems.map((item, i) => {\n            return item.label === \"Logout\" ? (\n              <Link\n                onClick={() => dispatch(SetLogout())}\n                to={item.redirectTo}\n                className=\"dropdown-item notify-item\"\n                key={i + \"-profile-menu\"}\n              >\n                <i className={classNames(item.icon, \"me-1\")}></i>\n                <span>{item.label}</span>\n              </Link>\n            ) : (\n              <Link\n                to={item.redirectTo}\n                className=\"dropdown-item notify-item\"\n                key={i + \"-profile-menu\"}\n              >\n                <i className={classNames(item.icon, \"me-1\")}></i>\n                <span>{item.label}</span>\n              </Link>\n            );\n          })}\n        </div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default ProfileDropdown;\n","// @flow\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport classNames from \"classnames\";\n\n// actions\nimport { ChangeLeftSideBarType, SetTheme } from \"../redux/slices/SettingSlice\";\n\nimport ProfileDropdown from \"../components/Ui/ProfileDropdown\";\n\n// images\nimport avatar1 from \"../assets/images/users/avatar-1.jpg\";\nimport avatar2 from \"../assets/images/users/avatar-1.jpg\";\nimport logoSmDark from \"../assets/images/logo_sm_dark.png\";\nimport logoSmLight from \"../assets/images/logo_sm.png\";\nimport logo from \"../assets/images/logo.png\";\n\n//constants\nimport * as layoutConstants from \"../redux/slices/SettingSlice\";\n\n// get the notifications\nconst Notifications = [\n  {\n    day: \"Today\",\n    messages: [\n      {\n        id: 1,\n        title: \"Datacorp\",\n        subText: \"Caleb Flakelar commented on Admin\",\n        time: \"1 min ago\",\n        icon: \"mdi mdi-comment-account-outline\",\n        variant: \"primary\",\n        isRead: false,\n      },\n      {\n        id: 2,\n        title: \"Admin\",\n        subText: \"New user registered.\",\n        time: \"1 hours ago\",\n        icon: \"mdi mdi-account-plus\",\n        variant: \"info\",\n        isRead: true,\n      },\n    ],\n  },\n  {\n    day: \"Yesterday\",\n    messages: [\n      {\n        id: 1,\n        title: \"Cristina Pride\",\n        subText: \"Hi, How are you? What about our next meeting\",\n        time: \"1 day ago\",\n        avatar: avatar1,\n        isRead: true,\n      },\n    ],\n  },\n  {\n    day: \"30 Dec 2021\",\n    messages: [\n      {\n        id: 1,\n        title: \"Datacorp\",\n        subText: \"Caleb Flakelar commented on Admin\",\n        icon: \"mdi mdi-comment-account-outline\",\n        variant: \"primary\",\n        isRead: true,\n      },\n      {\n        id: 2,\n        title: \"Karen Robinson\",\n        subText: \"Wow ! this admin looks good and awesome design\",\n        avatar: avatar2,\n        isRead: true,\n      },\n    ],\n  },\n];\n\n// get the profilemenu\nconst ProfileMenus = [\n\n  {\n    label: \"Logout\",\n    icon: \"mdi mdi-logout\",\n    redirectTo: \"/account/logout\",\n  },\n];\n\nconst Topbar = ({\n  hideLogo,\n  navCssClasses,\n  openLeftMenuCallBack,\n  topbarDark,\n}) => {\n  const dispatch = useDispatch();\n\n  const [isopen, setIsopen] = useState(false);\n  const { UserDetails } = useSelector((state) => state.User);\n\n  const navbarCssClasses = navCssClasses || \"\";\n  const containerCssClasses = !hideLogo ? \"container-fluid\" : \"\";\n\n  const { LayoutType, LeftSideBarType, LayoutColor } = useSelector(\n    (state) => state.Setting,\n  );\n\n  /**\n   * Toggle the leftmenu when having mobile screen\n   */\n  const handleLeftMenuCallBack = () => {\n    setIsopen((prevState) => !prevState);\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\n\n    switch (LayoutType) {\n      case layoutConstants.LAYOUT_VERTICAL:\n        // condition added\n        if (window.innerWidth >= 768) {\n          if (LeftSideBarType === \"fixed\" || LeftSideBarType === \"scrollable\")\n            dispatch(\n              ChangeLeftSideBarType(\n                layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED,\n              ),\n            );\n          if (LeftSideBarType === \"condensed\")\n            dispatch(\n              ChangeLeftSideBarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED),\n            );\n        }\n        break;\n\n      case layoutConstants.LAYOUT_FULL:\n        if (document.body) {\n          document.body.classList.toggle(\"hide-menu\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div className={classNames(\"navbar-custom\", navbarCssClasses)}>\n        <div className={containerCssClasses}>\n          {!hideLogo && (\n            <Link to=\"/\" className=\"topnav-logo\">\n              <span className=\"topnav-logo-lg\">\n                <img src={logo} alt=\"logo\" height=\"16\" />\n              </span>\n              <span className=\"topnav-logo-sm\">\n                <img\n                  src={topbarDark ? logoSmLight : logoSmDark}\n                  alt=\"logo\"\n                  height=\"16\"\n                />\n              </span>\n            </Link>\n          )}\n\n          <ul className=\"list-unstyled topbar-menu float-end mb-0\">\n            {/* \n            <li className=\"notification-list\">\n              {LayoutColor === \"light\" ? (\n                <button\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n                  onClick={() => dispatch(SetTheme(\"dark\"))}\n                >\n                  <i className=\"uil-moon noti-icon\"></i>\n                </button>\n              ) : (\n                <button\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\n                  onClick={() => dispatch(SetTheme(\"light\"))}\n                >\n                  <i className=\"uil-sun noti-icon\"></i>\n                </button>\n              )}\n            </li> */}\n            <li className=\"dropdown notification-list\">\n              <ProfileDropdown\n                profilePic={UserDetails?.Image}\n                menuItems={ProfileMenus}\n                username={UserDetails?.FirstName + \" \" + UserDetails?.LastName}\n                userTitle={UserDetails?.Roles}\n              />\n            </li>\n          </ul>\n          {/* toggle for vertical layout */}\n          {(LayoutType === layoutConstants.LAYOUT_VERTICAL ||\n            LayoutType === layoutConstants.LAYOUT_FULL) && (\n              <button\n                className=\"button-menu-mobile open-left\"\n                onClick={handleLeftMenuCallBack}\n              >\n                <i className=\"mdi mdi-menu\" />\n              </button>\n            )}\n\n          {/* toggle for horizontal layout */}\n          {LayoutType === layoutConstants.LAYOUT_HORIZONTAL && (\n            <Link\n              to=\"#\"\n              className={classNames(\"navbar-toggle\", { open: isopen })}\n              onClick={handleLeftMenuCallBack}\n            >\n              <div className=\"lines\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </Link>\n          )}\n\n          {/* toggle for detached layout */}\n          {LayoutType === layoutConstants.LAYOUT_DETACHED && (\n            <Link\n              to=\"#\"\n              className=\"button-menu-mobile disable-btn\"\n              onClick={handleLeftMenuCallBack}\n            >\n              <div className=\"lines\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </div>\n            </Link>\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Topbar;\n"],"names":["props","profilePic","profileImg","_useState","useState","_useState2","_slicedToArray","dropdownOpen","setDropdownOpen","dispatch","useDispatch","toggleDropdown","_jsxs","Dropdown","show","onToggle","children","Toggle","variant","id","as","Link","to","onClick","className","_jsx","src","alt","userTitle","Menu","align","menuItems","map","item","i","label","SetLogout","redirectTo","classNames","icon","ProfileMenus","_ref","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","isopen","setIsopen","UserDetails","useSelector","state","User","navbarCssClasses","containerCssClasses","_useSelector2","Setting","LayoutType","LeftSideBarType","handleLeftMenuCallBack","LayoutColor","prevState","layoutConstants","window","innerWidth","ChangeLeftSideBarType","document","body","classList","toggle","_Fragment","logo","height","logoSmLight","logoSmDark","ProfileDropdown","Image","username","FirstName","LastName","Roles","open"],"sourceRoot":""}